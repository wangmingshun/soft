<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd  
                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
                        
	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="com.icss.*" />
<!-- 	<aop:aspectj-autoproxy expose-proxy="true"></aop:aspectj-autoproxy> -->
	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />	<!-- JSON转换器 -->
			</list>
		</property>
	</bean>
	<!-- 定义跳转的文件的前后缀 ，视图模式配置-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"  
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="utf-8" />  
        <!-- 文件大小最大值 -->
        <property name="maxUploadSize" value="10485760000" />  
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="40960" />  
    </bean> 
    
    	<bean id="log" class="com.icss.spring.aopimpl.LoggingAspect" />
<!-- 	<bean id="aaa" class="com.icss.spring.aopimpl.ArithmeticCalculatorImpl" /> -->
	
	<aop:config>
		<aop:aspect ref="log">
			<aop:pointcut expression="execution(public int com.icss.spring.aopimpl.ArithmeticCalculatorImpl.add(int , int ))" id="simple"/>
			<aop:before method="beforeMethod" pointcut-ref="simple"/>
		</aop:aspect>
	</aop:config>

<!-- 
好了，经过各大论坛发帖，各大技术群求大神，终于找到了问题的原因：
1.是父子容器的问题
2.我的切面代码和连接点，通知都没有问题，问题出在了我的配置信息上面。
3.我将配置信息如下：

<aop:aspectj-autoproxy proxy-target-class="true"/>  
    <bean id="caFaceAuthAspect" class="com..aspect.CxxxAuthAspect"/>
将其配置在了spring-context.xml 核心配置文件中，该配置文件会被ContextLoaderListenerclass加在，Spring会创建一个WebApplicationContext上下文，称为父上下文（父容器） ，保存在 ServletContext中，keyWebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE的值。

而spring-mvc.xml是DispatcherServlet,可以同时配置多个，每个 DispatcherServlet有一个自己的上下文对象（WebApplicationContext），称为子上下文（子容器），子上下文可以访问父上下文中的内容，但父上下文不能访问子上下文中的内容。 它也保存在 ServletContext中，key是"org.springframework.web.servlet.FrameworkServlet.CONTEXT"+Servlet名称

当spring加在父容器的时候就会去找切入点，但是这个时候切入的controller是在子容器中的，父容器是无法访问子容器，所以就拦截不到。
如果将上述的配置文件放到spring-mvc.xml中，那么问题就解决了。我已经测试通过啦。
 -->


</beans>